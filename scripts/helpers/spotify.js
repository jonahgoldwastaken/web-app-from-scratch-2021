import { fetchAndParseJSON } from '../modules/fetch.js'
import { chunkArray } from '../utils/array.js'
import { createFetchAuthOptions } from '../utils/fetch.js'
import { convertMStoS } from '../utils/time.js'

export {
  saveToken,
  fetchProfile,
  fetchAndTemplateParseProfile,
  fetchTopTracks,
  fetchRecommendations,
  getListInfo,
  createSpotifyPlaylist,
  trimList,
  filterOutTracksInList,
  populateSpotifyPlaylist,
}

function saveToken(token) {
  return sessionStorage.setItem('spotify-token', `Bearer ${token}`)
}

async function fetchProfile() {
  const token = getToken()
  const profile = await fetchAndParseJSON(
    'https://api.spotify.com/v1/me',
    createFetchAuthOptions(token)
  )
  return profile
}

async function fetchTopTracks() {
  const token = getToken()
  const tracks = await fetchAndParseJSON(
    'https://api.spotify.com/v1/me/top/tracks?time_range=short_term',
    createFetchAuthOptions(token)
  )
  return tracks
}

async function fetchAndTemplateParseProfile() {
  const profile = fetchProfile()
  return parseProfileForTemplate(profile)
}

async function fetchRecommendations(ids) {
  const token = getToken()
  const { tracks } = await fetchAndParseJSON(
    `https://api.spotify.com/v1/recommendations?limit=20&seed_tracks=${ids.join(
      ','
    )}`,
    createFetchAuthOptions(token)
  )
  return tracks
}

function filterOutTracksInList(array) {
  return track => array.findIndex(t => t.id === track.id) === -1
}

function trimList(list, routeTime) {
  let newList = list
  while (getListInfo([...newList].slice(0, -1)).totalTime > routeTime) {
    newList = [...newList].slice(0, -1)
  }
  return newList
}

async function createSpotifyPlaylist(departure, arrival) {
  const token = getToken()
  const { id } = await fetchProfile()
  return await fetchAndParseJSON(
    `https://api.spotify.com/v1/users/${id}/playlists`,
    {
      ...createFetchAuthOptions(token, 'POST'),
      body: JSON.stringify({
        name: `Triplist for ${departure} -> ${arrival}`,
        description: 'Generated by Triplist @ https://wafs.jonahgold.dev',
      }),
    }
  )
}

async function populateSpotifyPlaylist(id, songs) {
  const chunkedSongs = chunkArray(songs, 100)
  return await postSongsToPlaylist(id, chunkedSongs, 0)
}

async function postSongsToPlaylist(id, songs, i) {
  const token = getToken()
  const newId = await fetchAndParseJSON(
    `https://api.spotify.com/v1/playlists/${id}/tracks`,
    {
      ...createFetchAuthOptions(token, 'POST'),
      body: JSON.stringify({
        uris: songs[i].map(song => song.uri),
      }),
    }
  )
  if (!songs[i + 1]) return true
  else return postSongsToPlaylist(newId, chunkedSongs, i + 1)
}

function getToken() {
  return sessionStorage.getItem('spotify-token')
}

function parseProfileForTemplate(profile) {
  return {
    ...profile,
    external_urls: Object.entries(profile.external_urls),
    images: profile.images[0],
  }
}

function getListInfo(list) {
  const totalTime = convertMStoS(
    list.reduce((acc, curr) => acc + curr.duration_ms, 0)
  )
  return { totalTime }
}
